import pandas as pd
import requests
import os

# scroll down to the bottom to implement your solution

if __name__ == '__main__':

    if not os.path.exists('../Data'):
        os.mkdir('../Data')

    # Download data if it is unavailable.
    if ('A_office_data.xml' not in os.listdir('../Data') and
            'B_office_data.xml' not in os.listdir('../Data') and
            'hr_data.xml' not in os.listdir('../Data')):
        print('A_office_data loading.')
        url = "https://www.dropbox.com/s/jpeknyzx57c4jb2/A_office_data.xml?dl=1"
        r = requests.get(url, allow_redirects=True)
        open('../Data/A_office_data.xml', 'wb').write(r.content)
        print('Loaded.')

        print('B_office_data loading.')
        url = "https://www.dropbox.com/s/hea0tbhir64u9t5/B_office_data.xml?dl=1"
        r = requests.get(url, allow_redirects=True)
        open('../Data/B_office_data.xml', 'wb').write(r.content)
        print('Loaded.')

        print('hr_data loading.')
        url = "https://www.dropbox.com/s/u6jzqqg1byajy0s/hr_data.xml?dl=1"
        r = requests.get(url, allow_redirects=True)
        open('../Data/hr_data.xml', 'wb').write(r.content)
        print('Loaded.')

        # All data in now loaded to the Data folder.

    # write your code here

    # 1 - Load all three datasets.
    office_a = pd.read_xml("../Data/A_office_data.xml")
    office_b = pd.read_xml("../Data/B_office_data.xml")
    hr_data = pd.read_xml("../Data/hr_data.xml")
    
    # 3 - Reindex all three datasets in the same way as in the previous stage;
    
    office_a.index = list(map(lambda x: 'A' + str(x), office_a.employee_office_id))
    office_b.index = list(map(lambda x: 'B' + str(x), office_b.employee_office_id))
    hr_data.index = list(hr_data.employee_id)
    
    # 4 - Use the concat() function for offices A and B;
    
    offices = pd.concat([office_a, office_b])
    
    # 5 - Use df.merge() | left merging of the unified office with HR's dataset
    
    final_df = pd.merge(offices, hr_data, how='left', left_index=True, right_index=True, indicator=True)
    final_df = final_df[final_df['_merge'] == 'both']
    
    # 6 - Drop the employee_office_id, employee_id columns and the column that contains a row source;
    
    final_df.drop(['employee_office_id', 'employee_id', '_merge'], axis=1, inplace=True)
    
    # 7 - Sort the final dataset by index
    
    final_df.sort_index(inplace=True)

    
    # 8 - Use df.pivot_table() to generate the pivot tables;
    
    pivot_1 = final_df.pivot_table(index='Department', columns=['left', 'salary'],
                                   values='average_monthly_hours', aggfunc='median').round(1)
                                   
    pivot_2 = final_df.pivot_table(index='time_spend_company', columns='promotion_last_5years',
                                   values=['last_evaluation', 'satisfaction_level'], aggfunc=['max', 'mean', 'min'])

    # 9 - Use searching methods to subset the data. Round all the numbers to two decimals.
    
    pivot_1 = pivot_1[(pivot_1[0, 'high'] < pivot_1[0, 'medium']) | (pivot_1[1, 'low'] < pivot_1[1, 'high'])]
    pivot_2 = pivot_2[pivot_2['mean', 'last_evaluation', 0] > pivot_2['mean', 'last_evaluation', 1]]
    
    pivot_1 = round(pivot_1, 2)
    pivot_2 = round(pivot_2, 2)
    
    print(pivot_1)
    print(pivot_2)
    
    #The Output looks like this:
    pivot_1:
    left           0.0                  1.0              
salary        high    low medium   high    low medium
Department                                           
IT           193.0  198.5  199.0  155.0  235.0  198.0
management   196.0  208.0  201.0  259.0  230.5  235.0
marketing    173.0  199.5  185.0  148.5  155.0  157.0
product_mng  172.0  198.5  202.0  149.0  218.0  154.5
sales        190.0  198.0  198.0  241.5  224.5  225.0
support      214.0  194.5  196.0  237.0  219.0  221.0
technical    193.0  197.0  202.0  157.5  244.0  232.0

pivot_2:
                                  max        ...                min      
                      last_evaluation        ... satisfaction_level      
promotion_last_5years               0     1  ...                  0     1
time_spend_company                           ...                         
2                                 1.0  0.99  ...               0.09  0.29
4                                 1.0  0.90  ...               0.09  0.15
5                                 1.0  0.91  ...               0.09  0.23
6                                 1.0  0.71  ...               0.12  0.48
10                                1.0  0.94  ...               0.14  0.22

[5 rows x 12 columns]




